pipeline {
    agent any

    environment {
        imageName = 'newswebsite:latest' // Docker image name
        containerName = 'newswebsite_container' // Docker container name
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out the code...'
                    git url: 'https://github.com/chauhanpranay19/NewsWebsite.git', branch: 'main'
                }
            }
        }

        stage('Check Docker') {
            steps {
                script {
                    try {
                        def dockerVersion = bat(script: "docker --version", returnStdout: true).trim()
                        echo "Docker version: ${dockerVersion}"
                    } catch (Exception e) {
                        error "Docker is not installed or configured correctly: ${e.message}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                    // Add your test commands or scripts here
                    // For example, you can run tests using npm, python, or any other framework
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                script {
                    echo 'Running OWASP Dependency Check...'
                    try {
                        dependencyCheck additionalArguments: '--project "NewsWebsite" -s . -f XML',
                                        odcInstallation: 'OWASP-Dependency-Check', // Make sure this name matches the installation
                                        stopBuild: false // Continue even if vulnerabilities are found (set to true for strict builds)
                        echo "OWASP Dependency Check completed."
                    } catch (Exception e) {
                        echo "OWASP Dependency Check failed: ${e.message}"
                    }
                }
            }
        }

        stage('Generate Report') {
            steps {
                script {
                    echo 'Generating OWASP Dependency Check report...'
                    // Simulate a delay for report generation
                    sleep(time: 5, unit: 'SECONDS')
                    echo 'Report generation complete.'
                    echo "You can view the detailed report [here](https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&id=chauhanpranay19_NewsWebsite)."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${imageName}..."
                    try {
                        bat "docker build -t ${imageName} ."
                    } catch (Exception e) {
                        error "Docker build failed: ${e.message}"
                    }
                }
            }
        }

         stage('Deploy Docker Container') {
            steps {
                script {
                    echo "Stopping and removing existing container ${containerName} if it exists..."
                    try {
                        // Stop and remove existing container if it exists
                        def containerExists = bat(script: "docker ps -q --filter name=${containerName}", returnStdout: true).trim()
                        if (containerExists) {
                            echo "Stopping existing container ${containerName}..."
                            bat "docker stop ${containerName}"
                            echo "Removing existing container ${containerName}..."
                            bat "docker rm ${containerName}"
                        } else {
                            echo "No container to stop or remove."
                        }

                        echo "Deploying Docker container ${containerName}..."
                        bat "docker run -d --name ${containerName} -p 80:80 ${imageName}"
                        echo "Docker container ${containerName} deployed successfully."
                    } catch (Exception e) {
                        error "Failed during Docker container deployment: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up Docker images..."
                try {
                    bat "docker rmi -f ${imageName} || echo 'No image to remove.'"
                } catch (Exception e) {
                    echo "Cleanup failed: ${e.message}"
                }
            }
        }
    }
}
