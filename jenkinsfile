pipeline {
    agent any

    environment {
        imageName = 'newswebsite:latest' // Define the image name here
        containerName = 'newswebsite_container' // Define the container name to use
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git url: 'https://github.com/chauhanpranay19/NewsWebsite.git', branch: 'main'
            }
        }
        stage('Check Docker') {
            steps {
                script {
                    def dockerVersion = bat(script: "docker --version", returnStdout: true).trim()
                    echo "Docker version: ${dockerVersion}"
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                // Add your test commands here
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${imageName}..."
                    bat "docker build -t ${imageName} . || error 'Docker build failed.'"
                }
            }
        }
        stage('Deploy Docker Container') {
            steps {
                script {
                    echo "Stopping and removing existing container ${containerName} if it exists..."
                    try {
                        def stopResult = bat(script: """
                            docker ps -q --filter name=${containerName} | findstr . && docker stop ${containerName} || echo 'No running container to stop'
                        """, returnStdout: true).trim()
                        echo "Stop Result: ${stopResult}"

                        def removeResult = bat(script: """
                            docker ps -a -q --filter name=${containerName} | findstr . && docker rm ${containerName} || echo 'No container to remove'
                        """, returnStdout: true).trim()
                        echo "Remove Result: ${removeResult}"

                        echo "Deploying Docker container ${containerName}..."
                        bat "docker run -d --name ${containerName} -p 80:80 ${imageName}"
                        echo "Docker container ${containerName} deployed successfully."
                    } catch (Exception e) {
                        error "Failed during Docker container deployment: ${e.message}"
                    }
                }
            }
        }
    }
}
