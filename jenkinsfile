pipeline {
    agent any

    environment {
        imageName = 'newswebsite:latest' // Define the image name here
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git url: 'https://github.com/chauhanpranay19/NewsWebsite.git', branch: 'main'
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                // Add your test commands here
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${imageName}..."
                    bat "docker build -t ${imageName} . || echo 'Docker build failed.'"
                }
            }
        }
        stage('Deploy Docker Container') {
            steps {
                script {
                    echo 'Stopping and removing existing container newswebsite_container if it exists...'
                    bat '''
                    docker ps -q --filter name=newswebsite_container | findstr . && docker stop newswebsite_container || echo No running container to stop
                    docker ps -a -q --filter name=newswebsite_container | findstr . && docker rm newswebsite_container || echo No container to remove
                    '''
                    echo "Deploying Docker container newswebsite_container..."
                    echo "Running command: docker run -d --name newswebsite_container -p 80:80 ${imageName}"
                    bat "docker run -d --name newswebsite_container -p 80:80 ${imageName} || echo 'Docker run failed.'"
                }
            }
        }
    }
     stage('Deploy ELK Stack') {
            steps {
                script {
                    echo 'Deploying ELK stack...'
                    dir("${terraformDir}") {
                        try {
                            // Assume you have a separate Terraform script for ELK stack
                            bat "terraform apply -auto-approve -state=elk.tfstate"
                        } catch (Exception e) {
                            error "ELK deployment failed: ${e.message}"
                        }
                    }
                }
            }
        }
         stage('Run Maven Tests') {
            steps {
                script {
                    echo 'Running Selenium UI/UX tests with Maven...'
                    try {
                        bat "${mavenHome}\\bin\\mvn test"
                    } catch (Exception e) {
                        error "Maven tests failed: ${e.message}"
                    }
                }
            }
        }
    post {
        always {
            script {
                echo 'Cleaning up...'
            }
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
