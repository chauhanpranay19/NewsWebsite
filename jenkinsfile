pipeline {
    agent any

    environment {
        imageName = 'newswebsite:latest' // Define the image name here
        containerName = 'newswebsite_container' // Define the container name to use
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'Checking out source code...'
                git url: 'https://github.com/chauhanpranay19/NewsWebsite.git', branch: 'main'
            }
        }
        stage('Check Docker') {
            steps {
                script {
                    def dockerVersion = bat(script: "docker --version", returnStdout: true).trim()
                    echo "Docker version: ${dockerVersion}"
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                // Add your test commands here (e.g., run unit tests, linting)
                // Example: bat "npm test" for a Node.js application
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                echo 'Running OWASP Dependency Check...'
                dependencyCheck additionalArguments: '--format XML', // Customize as needed
                    odcInstallation: 'OWASP-Dependency-Check', // Ensure this matches the name of your Dependency-Check installation
                    stopBuild: true // Stop the build if vulnerabilities are found
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${imageName}..."
                    bat "docker build -t ${imageName} . || error 'Docker build failed.'"
                }
            }
        }
        stage('Deploy Docker Container') {
            steps {
                script {
                    echo "Stopping and removing existing container ${containerName} if it exists..."
                    try {
                        def containerExists = bat(script: "docker ps -a -q --filter name=${containerName}", returnStdout: true).trim()
                        if (containerExists) {
                            echo "Stopping existing container ${containerName}..."
                            bat "docker stop ${containerName}"
                            echo "Removing existing container ${containerName}..."
                            bat "docker rm ${containerName}"
                        } else {
                            echo "No container to stop or remove."
                        }

                        echo "Deploying Docker container ${containerName}..."
                        bat "docker run -d --name ${containerName} -p 80:80 ${imageName} || error 'Docker run failed.'"
                        echo "Docker container ${containerName} deployed successfully."
                    } catch (Exception e) {
                        error "Failed during Docker container deployment: ${e.message}"
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up...'
            script {
                // Optionally remove the Docker image after deployment
                bat "docker rmi ${imageName} || echo 'No image to remove.'"
            }
        }
    }
}
